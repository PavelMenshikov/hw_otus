package config

import (
	"errors"
	"fmt"
	"log"
	"strconv"

	"github.com/glebarez/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var (
	BotToken = "7257094557:AAGy7dKJ3Oz0boJXPwSkxh2TwhmbbS4SiD4"
	DB       *gorm.DB
)

var PositiveQuestions = []string{
	"üí∞ –ß—Ç–æ–±—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –Ω–∞ –≤–æ–ª–Ω–∞—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏–∑–∏—Å–æ–≤...",
	"üìà –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª –∞–∫—Ü–∏–∏ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...",
	"üìä –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –æ—Ç–ª–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...",
}

var NegativeQuestions = []string{
	"üíº –°–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –Ω–µ–ª—é–±–∏–º—É—é —Ä–∞–±–æ—Ç—É?",
	"üòü –¢—Ä–µ–≤–æ–≥–∞ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö ‚Äì —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –∫ –¥–µ–π—Å—Ç–≤–∏—é...",
	"üí∏ –î–æ–ª–≥–∏ ‚Äì –∏—Ö –Ω–∞–¥–æ –æ—Ç–¥–∞–≤–∞—Ç—å. –ù–∞–ø–∏—à–∏ —Å—É–º–º—É —Å–≤–æ–µ–π –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏...",
}
var Questions = map[string]string{
	// –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏
	"–§–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É": "üí∞ –ß—Ç–æ–±—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –Ω–∞ –≤–æ–ª–Ω–∞—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏–∑–∏—Å–æ–≤...",
	// –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã...
	// –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏
	"–¢—Ä–µ–≤–æ–≥—É –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö": "üòü –¢—Ä–µ–≤–æ–≥–∞ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö ‚Äì —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –∫ –¥–µ–π—Å—Ç–≤–∏—é...",
	// –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã...
}

func MigrateDB() {
	DB.AutoMigrate(&UserStep{}, &UserAnswer{}) // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

func FinalSummary(totalAnnual, avgMonthly float64) string {
	return fmt.Sprintf(`
–¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Å–≤–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –º–µ—á—Ç–∞–º! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ 2025 –≥–æ–¥ ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã, —ç—Ç–æ –∂–∏–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å. –ö–∞–∂–¥–∞—è —Ç–≤–æ—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–µ–±—è, —Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –∏ –ø—Ä–æ—á–µ–µ ‚Äì —ç—Ç–æ —à–∞–≥ –∫ —Ç–≤–æ–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ.

<b>–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:</b> %.2f —Ä—É–±–ª–µ–π –≤ –≥–æ–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ %.2f —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü)

–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äì —ç—Ç–æ –∫–ª—é—á –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é.

–ï—Å–ª–∏ —Ç—ã –≤—ã–±—Ä–∞–ª —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É, –≤–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∞–∫—Ü–∏–∏ –∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏, –∏ –¥–∞–∂–µ —Ä–∏—Å–∫–Ω—É—Ç—å —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–≤–ª–µ—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ —Ç–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏! –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –≤–∞–∂–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –Ω–∞ –≤–æ–ª–Ω–∞—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. 

–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã. –ï—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã, —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ –¥–ª—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ ‚Äì —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –∫ –¥–µ–π—Å—Ç–≤–∏—é! –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ. 
–û—Å–æ–∑–Ω–∞–π: —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–≥—É—Ç —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è! –ß—Ç–æ, –µ—Å–ª–∏ —è —Å–∫–∞–∂—É —Ç–µ–±–µ, —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å?

–ö–∞–∂–¥—ã–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–¥–µ–ª–∞–ª –≤ —Ö–æ–¥–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, ‚Äì —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ö–∞–∂–¥—ã–π —Ä—É–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ç—Ä–∞—Ç–∏—à—å, –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–µ–±—è. –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∂–∏–∑–Ω—å, –æ –∫–æ—Ç–æ—Ä–æ–π –º–µ—á—Ç–∞–µ—à—å: —Å –¥–æ—Å—Ç–∞—Ç–∫–æ–º, –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω—è—è —Å–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.

–ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Å–µ–±—è! –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—å —Ç–≤–æ—ë —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã —Ä–æ—Å–ª–∏, –∞ –∑–∞–±–æ—Ç—ã –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –¥–µ–Ω–µ–≥ –∏—Å—á–µ–∑–∞–ª–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å, –∫–∞–∫–æ–≤–æ —ç—Ç–æ ‚Äì –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω—ã, –Ω–µ –∑–∞–¥—É–º—ã–≤–∞—è—Å—å –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö. –û—Å–æ–∑–Ω–∞–π, —á—Ç–æ —Ç–≤–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å.

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ—á—Ç—ã ‚Äì —ç—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Å—Ç–∞—Ç—å —Ö–æ–∑—è–∏–Ω–æ–º —Å–≤–æ–µ–π —Å—É–¥—å–±—ã. –ù–∞—á–Ω–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å! –¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ —ç—Ç–æ. –°—Ç—Ä–æ–π —Å–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –Ω–∞ 2025 –≥–æ–¥. –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!
`, totalAnnual, avgMonthly)
}
func UpdateUserStep(userID int64, step int, isPositive bool) error {
	return DB.Model(&UserStep{}).Where("user_id = ?", userID).Updates(UserStep{
		UserID:     userID,
		Step:       step,
		IsNegative: !isPositive,
	}).Error
}

func InitDB() {
	var err error
	DB, err = gorm.Open(sqlite.Open("./financial_planner.db"), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	// –ú–∏–≥—Ä–∞—Ü–∏–∏
	err = DB.AutoMigrate(&UserAnswer{}, &FinalCalculation{}, &UserStep{})
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
	}
}

type UserAnswer struct {
	ID         uint    `gorm:"primaryKey"`
	UserID     int64   `gorm:"not null"`
	Question   string  `gorm:"not null"`
	Answer     float64 `gorm:"not null"` // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø float64
	Step       int     `gorm:"not null"`
	IsNegative bool    `gorm:"not null"`
}
type UserStep struct {
	ID         uint  `gorm:"primaryKey"`
	UserID     int64 `gorm:"not null"`
	Step       int   `gorm:"not null"`
	IsNegative bool  `gorm:"not null"`
}
type FinalCalculation struct {
	ID                     uint    `gorm:"primaryKey"`
	UserID                 int64   `gorm:"not null"`
	TotalAnnualExpenses    float64 `gorm:"not null"`
	AverageMonthlyExpenses float64 `gorm:"not null"`
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func CreateOrUpdateUserAnswer(userID int64, question string, answer string, step int, isNegative bool) error {
	answerValue, err := strconv.ParseFloat(answer, 64)
	if err != nil {
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: %v", err)
	}

	var userAnswer UserAnswer
	result := DB.Where("user_id = ? AND question = ?", userID, question).First(&userAnswer)

	if errors.Is(result.Error, gorm.ErrRecordNotFound) {
		userAnswer = UserAnswer{
			UserID:     userID,
			Question:   question,
			Answer:     answerValue,
			Step:       step,
			IsNegative: isNegative,
		}
		return DB.Create(&userAnswer).Error
	}

	userAnswer.Answer = answerValue
	userAnswer.Step = step
	userAnswer.IsNegative = isNegative
	return DB.Save(&userAnswer).Error
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func CalculateFinalSummary(userID int64) (float64, float64) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var answers []UserAnswer
	err := DB.Where("user_id = ?", userID).Find(&answers).Error
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return 0, 0
	}

	var totalAnnual float64
	var economicAnswer float64

	// –ù–æ–º–µ—Ä —à–∞–≥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ "–≠–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –≤—Å—ë–º –Ω–µ –Ω—É–∂–Ω–æ"
	const EconomicQuestionStep = 30 // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π —à–∞–≥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞

	// –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
	for _, answer := range answers {
		totalAnnual += answer.Answer
		if answer.Step == EconomicQuestionStep {
			economicAnswer = answer.Answer
		}
	}

	// –í—ã—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —ç–∫–æ–Ω–æ–º–∏–∏, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ 2
	totalAnnual -= economicAnswer * 2

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—É—é —Å—É–º–º—É
	avgMonthly := totalAnnual / 12

	// –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	log.Printf("–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏–µ–º: %.2f", totalAnnual+economicAnswer*2)
	log.Printf("–û—Ç–≤–µ—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏: %.2f, –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è: %.2f", economicAnswer, economicAnswer*2)
	log.Printf("–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è: %.2f", totalAnnual)

	return totalAnnual, avgMonthly
}
